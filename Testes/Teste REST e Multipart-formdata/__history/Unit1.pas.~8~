unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdHTTP, System.Net.Mime,
  REST.Types, REST.Client, Data.Bind.Components, Data.Bind.ObjectScope;

type
  TForm1 = class(TForm)
    Button1: TButton;
    IdHTTP1: TIdHTTP;
    Memo1: TMemo;
    RESTClient1: TRESTClient;
    RESTRequest1: TRESTRequest;
    RESTResponse1: TRESTResponse;
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
    procedure TesteAPIChatGPT;
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}
uses
  {IdMultipartFormDataStream TIdHTTP, REST.Types, REST.Client,} REST.Response.Adapter;
{ TForm1 }

procedure TForm1.Button1Click(Sender: TObject);
begin
  TesteAPIChatGPT;
end;

procedure TForm1.TesteAPIChatGPT;
var

  Params: TMultipartFormData;
begin

  Params := TMultipartFormData.Create;
  try
    try
      RESTClient1.BaseURL := 'https://api.openai.com/v1/images/variations';
      // add the file to the request
      Params.AddFile('resized_file.png', ExtractFilePath(ParamStr(0))+'/resized_file.png', 'image/png');
      Params.AddField('image', 'resized_file.png');

      // add any additional parameters to the request
      Params.AddField('n', '2');
      Params.AddField('size', '256x256');

      RESTRequest1.Params.AddHeader('Authorization', 'Bearer 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');
      RESTRequest1.Params.ParameterByName('Authorization').Options := [poDoNotEncode];
      RESTRequest1.AddParameter('image', 'resized_file.png', TRESTRequestParameterKind.pkREQUESTBODY);
      // configure the request
      RESTRequest1.Method := rmPOST;
      RESTRequest1.AddParameter('Content-Type', 'multipart/form-data', TRESTRequestParameterKind.pkHTTPHEADER);
      RESTRequest1.AddParameter('n', '2', TRESTRequestParameterKind.pkHTTPHEADER);
      RESTRequest1.AddParameter('size', '256x256', TRESTRequestParameterKind.pkHTTPHEADER);
      RESTRequest1.Params.ParameterByName('Content-Type').Options := [poDoNotEncode];
      //RESTRequest1.AddParameter('filename', 'file.ext', TRESTRequestParameterKind.pkHTTPHEADER);
      //RESTRequest1.AddParameter('Content-Disposition', 'attachment; filename="file.ext"', TRESTRequestParameterKind.pkHTTPHEADER);
      //RESTRequest1.AddBody(Params);

      // send the request
      RESTRequest1.Execute;

      // handle the response
      Memo1.Lines.Add(RESTResponse1.Content);
    except
      on e:Exception  do
        raise Exception.Create(e.Message);

    end;
  finally
    Params.Free;
  end;
end;


end.
