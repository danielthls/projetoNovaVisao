unit UDaoCliente;

interface

uses
  uEntity.Cliente;

type
  TDAOCliente= class
    private
      FTabela: String;

    public
      constructor Create;

      function ObterRegistros: TCliente;
      function ProcurarCliente(const aIdentificador: Integer): TCliente;
      function AdicionarRegistro(aCliente: TCliente): Boolean;
  end;

implementation

uses
  System.SysUtils,
  UUtils.Banco;

{ TDAOUsers }

constructor TDAOCliente.Create;
begin
  FTabela := 'clientes';
end;

function TDaoCliente.AdicionarRegistro(aCliente: TCliente): Boolean;
var
  UtilBanco: TUtilBanco;
begin
  UtilBanco := TUtilBanco.Create;
  try
    try
      Result := UtilBanco.AdicionarRegistro(aCliente);
    except
      on e: Exception do
        raise Exception.Create('Erro ao Adicionar Registro: '
          + e.Message);
    end;
  finally
    FreeAndNil(UtilBanco);
  end;

end;

function TDAOCliente.ObterRegistros: TCliente;
begin
  try
    Self.ProcurarCliente()
    //Result := TUtilBanco.ExecutarConsulta(Format('SELECT * FROM %s',
    //  [FTabela]));
  except
    on e: Exception do
      raise Exception.Create('Erro ao Obter Registros: ' + e.Message);
  end;
end;

function TDAOCliente.ProcurarCliente(const aIdentificador: Integer): TCliente;
begin
  try
    Self.ProcurarCliente(aIdentificador);
    //TUtilBanco.ExecutarConsulta(Format('SELECT * FROM %s WHERE ID = %d',
    //                  [FTabela, aIdentificador]));


  except
    on e: Exception do
      raise Exception.Create('Erro ao Obter Registros: ' + e.Message);
  end;
end;

end.
